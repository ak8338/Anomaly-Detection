import math
import random

# Function to simulate data stream
def generate_data_stream(size=1000):
    """
    Simulates a continuous data stream with seasonal patterns, noise, and anomalies.
    The stream is generated by combining a sine wave for regular seasonality with random noise,
    and injecting random anomalies at specified points.
    
    :param size: Length of the data stream to generate (must be positive).
    :return: List of simulated data.
    :raises ValueError: If size is not a positive integer.
    """
    if size <= 0:
        raise ValueError("Size of the data stream must be a positive integer.")
    
    data_stream = []
    
    for t in range(size):
        seasonal_pattern = 10 * math.sin(0.02 * t)  # Sine wave for seasonal pattern
        noise = random.uniform(-1, 1)  # Random noise between -1 and 1
        value = seasonal_pattern + noise
        data_stream.append(value)
    
    # Inject anomalies at random indices
    anomaly_indices = random.sample(range(size), 10)
    for i in anomaly_indices:
        data_stream[i] += random.uniform(15, 25)  # Inject high anomaly values
    
    return data_stream

# Function to detect anomalies using EWMA (Exponentially Weighted Moving Average)
def ewma_anomaly_detection(data, alpha=0.3, threshold=3):
    """
    Detects anomalies in a data stream using Exponentially Weighted Moving Average (EWMA).
    The EWMA algorithm tracks a weighted average of past data points, giving more importance to recent points.
    Anomalies are detected when the absolute deviation from the EWMA exceeds a specified threshold.
    
    :param data: List of the data stream (cannot be empty).
    :param alpha: Smoothing factor for EWMA (0 < alpha < 1).
    :param threshold: Threshold for detecting anomalies based on deviation.
    :return: Tuple (EWMA list, list of anomaly indices).
    :raises ValueError: If the data is empty or alpha is out of bounds.
    """
    if len(data) == 0:
        raise ValueError("Data stream cannot be empty.")
    
    if not (0 < alpha < 1):
        raise ValueError("Alpha must be a value between 0 and 1.")
    
    ewma = [0] * len(data)
    anomalies = []
    
    ewma[0] = data[0]  # Initialize EWMA with the first value
    
    for i in range(1, len(data)):
        ewma[i] = alpha * data[i] + (1 - alpha) * ewma[i - 1]
        deviation = abs(data[i] - ewma[i])
        if deviation > threshold:  # Flag anomalies if deviation exceeds threshold
            anomalies.append(i)
    
    return ewma, anomalies

# Function to display the data stream and mark anomalies
def display_data_with_anomalies(data, anomalies):
    """
    Displays the data stream, marking anomalies in the output.
    For each data point, the value is printed along with its index and whether it is an anomaly.
    
    :param data: List of the data stream.
    :param anomalies: List of indices where anomalies were detected.
    """
    for i, value in enumerate(data):
        if i in anomalies:
            print(f"Index {i}: Value = {value:.2f} (Anomaly)")
        else:
            print(f"Index {i}: Value = {value:.2f} (Normal)")

# Main logic
def main():
    """
    The main function that generates the data stream, detects anomalies, and displays the results.
    This function simulates a data stream, applies the EWMA anomaly detection, and prints results.
    """
    try:
        # Generate the data stream
        data_stream = generate_data_stream()

        # Apply the EWMA anomaly detection
        ewma, anomalies = ewma_anomaly_detection(data_stream)

        # Display the results, highlighting anomalies
        print("Detected anomalies:")
        display_data_with_anomalies(data_stream, anomalies)

    except ValueError as e:
        print(f"Error: {e}")

# Run the main function
if __name__ == "__main__":
    main()


'''
Explanation of the Algorithm

The Exponentially Weighted Moving Average (EWMA) algorithm is used for anomaly detection. 
This algorithm calculates a moving average where more weight is given to recent data points. 
This makes it effective in tracking trends and detecting anomalies in streaming data, such 
as financial metrics or system performance, where concept drift or changes in trends may occur.
'''

'''
How the algorithm works:

Initialization: The first value of the data stream is used to initialize the EWMA.

Weighting: Each subsequent value is weighted by a factor alpha, which determines 
how much importance is given to the current data point versus the past EWMA.

Anomaly Detection: An anomaly is detected when the absolute difference between 
the current data point and the EWMA exceeds a predefined threshold.
'''

'''
Error Handling and Data Validation
The script includes robust error handling:

Validation for data size: The size of the data stream must be a positive integer.
Validation for alpha: The smoothing factor alpha must be between 0 and 1.
Empty data streams: If an empty data stream is passed, an error will be raised.

'''